<--
Double sum(List l){
	if(l==null)return null;
	double sum = 0;
	for(Object o : l){
		Double d = toDouble(o);
		if(d == null) return null;
		sum += d;
	}
	return sum;
}
public List list(Object... t){
	if(t == null) return null;
	return Arrays.asList(t);
}
public List divide(List l1, List l2){
	if(l1==null || l2 ==null) return null;
	final int l1_size = l1.size();
	final int l2_size = l2.size();
	List ret = new ArrayList(l1_size);
	int count = 0;

	for(int i = 0; i < l1_size; i++){
		Double d1 = toDouble(l1.get(i));
		Double d2 = toDouble(l2.get(count));
		if(d1 == null || d2 == null) return null;
		ret.add(d1/d2);
		//if(l2_size == count) count = 0;
		count = (count+1) %l2_size;
	}
	return ret;
}
public List mult(List l1, List l2){
	if(l1==null || l2 ==null) return null;
	final int l1_size = l1.size();
	final int l2_size = l2.size();
	List ret = new ArrayList(l1_size);
	int count = 0;

	for(int i = 0; i < l1_size; i++){
		Double d1 = toDouble(l1.get(i));
		Double d2 = toDouble(l2.get(count));
		if(d1 == null || d2 == null) return null;
		ret.add(d1*d2);
		//if(l2_size == count) count = 0;
		count = (count+1) %l2_size;
	}
	return ret;
}
public List subt(List l1, List l2){
	if(l1==null || l2 ==null) return null;
	final int l1_size = l1.size();
	final int l2_size = l2.size();
	List ret = new ArrayList(l1_size);
	int count = 0;

	for(int i = 0; i < l1_size; i++){
		Double d1 = toDouble(l1.get(i));
		Double d2 = toDouble(l2.get(count));
		if(d1 == null || d2 == null) return null;
		ret.add(d1-d2);
		//if(l2_size == count) count = 0;
		count = (count+1) %l2_size;
	}
	return ret;
}
public Double toDouble(Object o){
	if(o==null) return null;
	if(o instanceof Integer) return (double)(int) o;
	if(o instanceof Character) return (double)(char) o;
	if(o instanceof Long) return (double)(long) o;
	if(o instanceof Byte) return (double)(byte) o;
	if(o instanceof Short) return (double)(byte) o;
	if(o instanceof Double) return (double) o;
	return null;
}
public List mult(List l1, Double l2){
	final int l1_size = l1.size();
	List ret = new ArrayList(l1_size);

	for(int i = 0; i < l1_size; i++){
		ret.add((Double)l1.get(i) * l2);
	}
	return ret;
}
-->